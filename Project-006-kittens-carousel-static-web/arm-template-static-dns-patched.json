{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.2",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "storageAccountName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24
    },
    "createDnsZone": {
      "type": "bool",
      "defaultValue": true
    },
    "dnsZoneName": {
      "type": "string"
    },
    "fullDomainName": {
      "type": "string"
    },
    "githubZipUrl": {
      "type": "string",
      "defaultValue": "https://codeload.github.com/AydinTokuslu/AWS-DevOps-Projects/zip/refs/heads/main"
    },
    "contentRelativePath": {
      "type": "string",
      "defaultValue": "Project-101 Kittens-carousel-static-website-ec2/static-web"
    }
  },
  "variables": {
    "storageSku": "Standard_LRS",
    "relativeRecord": "[replace(parameters('fullDomainName'), concat('.', parameters('dnsZoneName')), '')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[variables('storageSku')]"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-01-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-01-01",
      "name": "[concat(parameters('storageAccountName'), '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "enableStaticWebsiteAndUploadContent",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', '$web')]"
      ],
      "properties": {
        "azCliVersion": "2.61.0",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "environmentVariables": [
          {
            "name": "STORAGE_ACCOUNT",
            "value": "[parameters('storageAccountName')]"
          },
          {
            "name": "ACCOUNT_KEY",
            "secureValue": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').keys[0].value]"
          },
          {
            "name": "GITHUB_ZIP",
            "value": "[parameters('githubZipUrl')]"
          },
          {
            "name": "CONTENT_RELATIVE",
            "value": "[parameters('contentRelativePath')]"
          }
        ],
        "scriptContent": "\n          set -euo pipefail\n\n          echo \">>> Enable Static Website on the storage account\"\n          az storage blob service-properties update \\\n            --account-name \"${STORAGE_ACCOUNT}\" \\\n            --account-key \"${ACCOUNT_KEY}\" \\\n            --static-website \\\n            --index-document index.html \\\n            --404-document index.html\n\n          echo \">>> Download repo ZIP: ${GITHUB_ZIP}\"\n          WORKDIR=\"$(mktemp -d)\"\n          cd \"$WORKDIR\"\n          curl -L \"$GITHUB_ZIP\" -o repo.zip\n\n          echo \">>> Extract ZIP\"\n          python3 - << 'PY'\nimport zipfile, os\nz = zipfile.ZipFile('repo.zip')\nz.extractall('repo')\nPY\n\n          ROOT_DIR=\"$(ls -d repo/*/ | head -n1)\"\n          SRC_PATH=\"${ROOT_DIR}${CONTENT_RELATIVE}\"\n          echo \">>> Source path: ${SRC_PATH}\"\n\n          echo \">>> Upload specific files to $web\"\n          for f in cat0.jpg cat1.jpg cat2.jpg cat3.jpg index.html; do\n            if [ -f \"${SRC_PATH}/$f\" ]; then\n              az storage blob upload \\\n                --account-name \"${STORAGE_ACCOUNT}\" \\\n                --account-key \"${ACCOUNT_KEY}\" \\\n                --container-name '$web' \\\n                --file \"${SRC_PATH}/$f\" \\\n                --name \"$f\" \\\n                --overwrite\n            else\n              echo \"WARN: ${SRC_PATH}/$f not found\"\n            fi\n          done\n\n          echo \">>> Done.\"\n"
      }
    },
    {
      "condition": "[parameters('createDnsZone')]",
      "type": "Microsoft.Network/dnsZones",
      "apiVersion": "2018-05-01",
      "name": "[parameters('dnsZoneName')]",
      "location": "global",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/dnsZones/CNAME",
      "apiVersion": "2018-05-01",
      "name": "[concat(parameters('dnsZoneName'), '/', variables('relativeRecord'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/dnsZones', parameters('dnsZoneName'))]",
        "[resourceId('Microsoft.Resources/deploymentScripts', 'enableStaticWebsiteAndUploadContent')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "TTL": 3600,
        "CNAMERecord": {
          "cname": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
        }
      }
    }
  ],
  "outputs": {
    "websitePrimaryEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.web]"
    },
    "dnsRecord": {
      "type": "string",
      "value": "[concat(variables('relativeRecord'), '.', parameters('dnsZoneName'))]"
    },
    "cnameTarget": {
      "type": "string",
      "value": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
    },
    "deploymentScriptState": {
      "type": "string",
      "value": "[reference('enableStaticWebsiteAndUploadContent').provisioningState]"
    }
  }
}